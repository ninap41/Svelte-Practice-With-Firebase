{"version":3,"file":"rxfire-storage.js","sources":["storage/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { storage } from 'firebase/app';\nimport { Observable, from } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport function fromTask(task: storage.UploadTask) {\n  return new Observable<storage.UploadTaskSnapshot>(subscriber => {\n    const progress = (snap: storage.UploadTaskSnapshot) =>\n      subscriber.next(snap);\n    const error = e => subscriber.error(e);\n    const complete = () => subscriber.complete();\n    task.on('state_changed', progress, error, complete);\n    return () => task.cancel();\n  });\n}\n\nexport function getDownloadURL(ref: storage.Reference) {\n  return from(ref.getDownloadURL());\n}\n\nexport function getMetadata(ref: storage.Reference) {\n  return from(ref.getMetadata());\n}\n\nexport function put(\n  ref: storage.Reference,\n  data: any,\n  metadata?: storage.UploadMetadata\n) {\n  return fromTask(ref.put(data, metadata));\n}\n\nexport function putString(\n  ref: storage.Reference,\n  data: string,\n  format?: storage.StringFormat,\n  metadata?: storage.UploadMetadata\n) {\n  return fromTask(ref.putString(data, format, metadata));\n}\n\nexport function percentage(task: storage.UploadTask) {\n  return fromTask(task).pipe(\n    map(s => ({\n      progress: (s.bytesTransferred / s.totalBytes) * 100,\n      snapshot: s\n    }))\n  );\n}\n"],"names":["fromTask","task","Observable","subscriber","on","snap","next","e","error","complete","cancel","ref","from","getDownloadURL","getMetadata","pipe","map","s","progress","bytesTransferred","totalBytes","snapshot","data","metadata","put","format","putString"],"mappings":"uCAqBgBA,EAASC,GACvB,OAAO,IAAIC,aAAuC,SAAAC,GAMhD,OADAF,EAAKG,GAAG,gBAJS,SAACC,GAChB,OAAAF,EAAWG,KAAKD,IACJ,SAAAE,GAAK,OAAAJ,EAAWK,MAAMD,IACnB,WAAM,OAAAJ,EAAWM,aAE3B,WAAM,OAAAR,EAAKS,mDAISC,GAC7B,OAAOC,OAAKD,EAAIE,0CAGUF,GAC1B,OAAOC,OAAKD,EAAIG,sCAoBSb,GACzB,OAAOD,EAASC,GAAMc,KACpBC,MAAI,SAAAC,GAAK,OACPC,SAAWD,EAAEE,iBAAmBF,EAAEG,WAAc,IAChDC,SAAUJ,sBApBdN,EACAW,EACAC,GAEA,OAAOvB,EAASW,EAAIa,IAAIF,EAAMC,0BAI9BZ,EACAW,EACAG,EACAF,GAEA,OAAOvB,EAASW,EAAIe,UAAUJ,EAAMG,EAAQF"}