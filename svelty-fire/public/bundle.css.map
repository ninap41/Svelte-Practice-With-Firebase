{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/Login.svelte",
    "../src/components/todos/Todos.svelte",
    "../src/components/todos/TodoItem.svelte",
    "../node_modules/svelte-easyroute-rollup/RouterLink.svelte"
  ],
  "sourcesContent": [
    "<script>\n    import Profile from './Profile.svelte';\n    import Todos from './components/todos/Todos.svelte';\n  import { observe } from 'svelte-observable'; \n\n    import { auth, googleProvider } from './firebase';\n    import { authState } from 'rxfire/auth';\n\n    export let props\n    var Loaded = false;\n    \n    export let user;\n    if(user === null) {\n        Loaded = false;\n    }\n    const unsubscribe = authState(auth).subscribe(u => user = u);\n    function login() {\n        auth.signInWithPopup(googleProvider);\n    }\n      const results_store = observe(unsubscribe);\n\n    \tconsole.log('the component has mounted');\n    \n    \n\n\n</script>\n{#await $results_store}\n  pending - No value or error has been received yet\n{:then result}\n  fulfilled - Received a value\n{:catch error}\n  rejected - Received an error\n{/await}\n<section>\n{#if user}\n    <Profile {...user} />\n    <button on:click={ () => auth.signOut() } class=\"button\">Logout</button>\n    <hr>\n    <Todos uid={user.uid} />\n{:else}\n<div class=\"jumbotron\"  >\n  <h1 class=\"display-3\" >Welcome to {props}!</h1>\n    <p class=\"lead\">\n\t\tHere's a first try at svelte I don't know what I'm doing so lets see where this takes me. The beginning was super rough because all these damn helpers and imports are needed for basic things like ARRAYs, but ol RichieH's framework might grow on me. \n\t</p>\n    <hr class=\"my-4\">\n    <p>\n        \"Ugh Here we go\"\n    </p> \n    <button class=\"btn-warning\" on:click={login} >\n\t\tSignin with Google\n\t</button>\n</div>\n{/if}\n</section>\n\n<style>\n    section {\n        background: rgb(235, 235, 235);\n        padding: 20px;\n    }\n</style>",
    "<script>\n    import TodoItem from './TodoItem.svelte';\n    import { db } from '../../firebase';\n    import { collectionData } from 'rxfire/firestore';\n    import { startWith } from 'rxjs/operators';\n\n    export let uid;\n\n    let text = 'some task';\n    const query = db.collection('todos').where('uid', '==', uid).orderBy('created');\n    const todos = collectionData(query, 'id').pipe(startWith([]));\n    function add() {\n        db.collection('todos').add({ uid, text, complete: false, created: Date.now() });\n        text = '';\n    }\n    function updateStatus(event) {\n        console.log(event);\n        const { id, newStatus } = event.detail;\n        db.collection('todos').doc(id).update({ complete: newStatus });\n    }\n    function removeItem(event) {\n        const { id } = event.detail;\n        db.collection('todos').doc(id).delete();\n    }\n</script>\n\n<style>\n    input { display: block }\n</style>\n\n<ul>\n\t{#each $todos as todo}\n        <TodoItem {...todo} on:remove={removeItem} on:toggle={updateStatus} />\n\t{/each}\n</ul>\n<input bind:value={text}>\n<hr>\n<p>Your task: <strong>{ text }</strong></p>\n<button class=\"button is-info\" on:click={add}>Add Task</button>",
    "<script>\n    import { fade, fly } from 'svelte/transition';\nexport let router\n    import { createEventDispatcher } from 'svelte';\n\n    const dispatch = createEventDispatcher();\n    \n    function remove() {\n\t\tdispatch('remove', { id });\n\t}\n\n\tfunction toggleStatus() {\n        let newStatus = !complete;\n\t\tdispatch('toggle', {\n            id,\n            newStatus\n        });\n    }\n    \n    export let id; // document ID\n    export let text;\n    export let complete;\n</script>\n\n<style>\n    .is-complete {\n        text-decoration: line-through;\n        color: green;\n    }\n\n    li {\n        display: flex;\n        font-size: 1.2em;\n        font-weight: bold;\n    }\n\n    span {\n        margin-right: auto;\n    }\n</style>\n\n\n<li in:fly=\"{{ x: 900, duration: 500 }}\" out:fade>\n\n{#if complete}\n    <span class=\"is-complete\">\n        { text }\n    </span>\n\t<button class=\"is-button\" on:click={toggleStatus}>\n\t\t‚úîÔ∏è\n\t</button>\n{:else}\n    <span>\n        { text }\n    </span>\n\t<button class=\"is-button\" on:click={toggleStatus}>\n\t\t‚ùå\n\t</button>\n{/if}\n\n<button class=\"is-button\" on:click={remove}>\n    üóëÔ∏è\n</button>\n\n</li>",
    "<div class=\"router-link\" on:click={navigateRouter}>\n{#if text && text !== \"\"}\n{text}\n{/if}\n<slot></slot>\n</div>\n\n<script>\n    export let to\n    export let text\n\n    function navigateRouter() {\n        if (window.routermode == 'hash') window.location.hash = to\n        if (window.routermode == 'history') {\n            let stateObj = { path: to, needAddBase: true };\n            var event = new CustomEvent('svelteEasyrouteLinkClicked', \n                { \n                    'detail': stateObj\n                });\n            window.dispatchEvent(event)\n        }\n    }\n</script>\n\n<style>\n    div.router-link {\n        color: blue;\n        text-decoration: underline;\n        cursor: pointer;\n        display: inline-block;\n    }\n</style>"
  ],
  "names": [],
  "mappings": "AA0DI,OAAO,eAAC,CAAC,AACL,UAAU,CAAE,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAC9B,OAAO,CAAE,IAAI,AACjB,CAAC;AClCD,KAAK,eAAC,CAAC,AAAC,OAAO,CAAE,KAAK,CAAC,CAAC;ACFxB,YAAY,eAAC,CAAC,AACV,eAAe,CAAE,YAAY,CAC7B,KAAK,CAAE,KAAK,AAChB,CAAC,AAED,EAAE,eAAC,CAAC,AACA,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,KAAK,CAChB,WAAW,CAAE,IAAI,AACrB,CAAC,AAED,IAAI,eAAC,CAAC,AACF,YAAY,CAAE,IAAI,AACtB,CAAC;ACbD,GAAG,YAAY,eAAC,CAAC,AACb,KAAK,CAAE,IAAI,CACX,eAAe,CAAE,SAAS,CAC1B,MAAM,CAAE,OAAO,CACf,OAAO,CAAE,YAAY,AACzB,CAAC"
}